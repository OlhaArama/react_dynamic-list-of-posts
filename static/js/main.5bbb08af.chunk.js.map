{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","components/NewCommentForm.tsx","api/comments.ts","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","api/users.ts","api/posts.ts","index.tsx"],"names":["PostsList","posts","selectedPost","setSelectedPost","setCommentsLoadingError","className","map","post","id","title","type","classNames","onClick","selectPost","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","ok","Error","json","client","NewCommentForm","addComment","selectedPostId","useState","isNameError","setIsNameError","isEmailError","setIsEmailError","isCommentTextError","setIsCommentTextError","isLoading","setIsLoading","postId","name","email","newComment","setNewComment","handleChange","event","target","value","onSubmit","preventDefault","trim","createComment","comment","finally","htmlFor","placeholder","onChange","PostDetails","comments","isLoadingComments","commentsLoadingError","createNewComment","isAddingNewComment","deleteComment","length","href","UserSelector","users","selectUser","selectedUser","isOpen","setIsOpen","role","user","onSelectUser","App","setUsers","setPosts","setSelectedUser","isLoadingPosts","setIsLoadingPosts","postsLoadingError","setPostsLoadingError","setComments","setIsLoadingComments","setIsAddingNewComment","useEffect","userId","catch","commentId","filter","removeComment","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5bbb08af.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[];\n  selectedPost: Post | null,\n  setSelectedPost: React.Dispatch<React.SetStateAction<Post | null>>,\n  setCommentsLoadingError: React.Dispatch<React.SetStateAction<boolean>>,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  selectedPost,\n  setSelectedPost,\n  setCommentsLoadingError,\n}) => {\n  const selectPost = (post: Post) => {\n    if (selectedPost && post.id === selectedPost.id) {\n      setSelectedPost(null);\n    } else {\n      setSelectedPost(post);\n      setCommentsLoadingError(false);\n    }\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => (\n            <tr data-cy=\"Post\" key={post.id}>\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={classNames(\n                    'button',\n                    'is-link',\n                    {\n                      'is-light': !selectedPost || post.id !== selectedPost.id,\n                    },\n                  )}\n                  onClick={() => selectPost(post)}\n                >\n                  {\n                    selectedPost && post.id === selectedPost.id\n                      ? 'Close'\n                      : 'Open'\n                  }\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  // eslint-disable-next-line\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  // eslint-disable-next-line\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  // eslint-disable-next-line\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { createComment } from '../api/comments';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  addComment: (newComment: Comment) => void,\n  selectedPostId: number,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  addComment,\n  selectedPostId,\n}) => {\n  const [isNameError, setIsNameError] = useState(false);\n  const [isEmailError, setIsEmailError] = useState(false);\n  const [isCommentTextError, setIsCommentTextError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [newComment, setNewComment] = useState({\n    postId: 0,\n    name: '',\n    email: '',\n    body: '',\n  });\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (newComment && !newComment.name.trim()) {\n      setIsNameError(true);\n    }\n\n    if (newComment && !newComment.email.trim()) {\n      setIsEmailError(true);\n    }\n\n    if (newComment && !newComment.body.trim()) {\n      setIsCommentTextError(true);\n    }\n\n    if (newComment\n      && newComment.name.trim()\n      && newComment.email.trim()\n      && newComment.body.trim()) {\n      setIsLoading(true);\n\n      createComment(\n        {\n          name: newComment.name,\n          email: newComment.email,\n          body: newComment.body,\n        },\n        selectedPostId,\n      ).then((comment) => {\n        addComment({ ...comment });\n\n        setIsNameError(false);\n        setIsEmailError(false);\n        setIsCommentTextError(false);\n        setNewComment({\n          ...newComment,\n          body: '',\n        });\n      })\n        .finally(() => {\n          setIsLoading(false);\n        });\n    }\n  };\n\n  const handleClearForm = () => {\n    setNewComment({\n      postId: selectedPostId,\n      name: '',\n      email: '',\n      body: '',\n    });\n    setIsNameError(false);\n    setIsEmailError(false);\n    setIsCommentTextError(false);\n  };\n\n  const handleChange = (\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => {\n    const { name, value } = event.target;\n\n    setNewComment({\n      ...newComment,\n      [name]: value,\n    });\n\n    switch (name) {\n      case 'name':\n        setIsNameError(false);\n        break;\n\n      case 'email':\n        setIsEmailError(false);\n        break;\n\n      case 'body':\n        setIsCommentTextError(false);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames(\n              'input',\n              {\n                'is-danger': isNameError,\n              },\n            )}\n            value={newComment.name}\n            onChange={handleChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {isNameError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isNameError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"email\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames(\n              'input',\n              {\n                'is-danger': isEmailError,\n              },\n            )}\n            value={newComment.email}\n            onChange={handleChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {isEmailError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isEmailError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames(\n              'textarea',\n              {\n                'is-danger': isCommentTextError,\n              },\n            )}\n            value={newComment.body}\n            onChange={handleChange}\n          />\n        </div>\n\n        {isCommentTextError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button',\n              'is-link',\n              {\n                'is-loading': isLoading,\n              },\n            )}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleClearForm}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { Comment, CommentData } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const createComment = (newComment: CommentData, postId: number) => {\n  return client.post<Comment>('/comments', {\n    ...newComment,\n    postId,\n  });\n};\n\nexport const removeComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n","import React from 'react';\nimport { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\n\ntype Props = {\n  selectedPost: Post,\n  comments: Comment[];\n  isLoadingComments: boolean;\n  commentsLoadingError: boolean,\n  createNewComment: () => void,\n  isAddingNewComment: boolean,\n  addComment: (newComment: Comment) => void,\n  deleteComment: (commentId: number) => void,\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  selectedPost,\n  comments,\n  isLoadingComments,\n  commentsLoadingError,\n  createNewComment,\n  isAddingNewComment,\n  addComment,\n  deleteComment,\n}) => {\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${selectedPost.id}: ${selectedPost.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {selectedPost.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoadingComments && <Loader />}\n\n          {commentsLoadingError && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {!isLoadingComments\n            && !commentsLoadingError\n            && !comments.length\n            && (\n              <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                No comments yet\n              </p>\n            )}\n\n          {!isLoadingComments\n            && !commentsLoadingError\n            && comments.length > 0\n            && (\n              <>\n                <p className=\"title is-4\">Comments:</p>\n\n                {comments.map(comment => (\n                  <article\n                    className=\"message is-small\"\n                    data-cy=\"Comment\"\n                    key={comment.id}\n                  >\n                    <div className=\"message-header\">\n                      <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                        {comment.name}\n                      </a>\n                      <button\n                        data-cy=\"CommentDelete\"\n                        type=\"button\"\n                        className=\"delete is-small\"\n                        aria-label=\"delete\"\n                        onClick={() => deleteComment(comment.id)}\n                      >\n                        delete button\n                      </button>\n                    </div>\n\n                    <div className=\"message-body\" data-cy=\"CommentBody\">\n                      {comment.body}\n                    </div>\n                  </article>\n                ))}\n              </>\n            )}\n\n          {!isLoadingComments\n            && !isAddingNewComment\n            && !commentsLoadingError\n            && (\n              <button\n                data-cy=\"WriteCommentButton\"\n                type=\"button\"\n                className=\"button is-link\"\n                onClick={createNewComment}\n              >\n                Write a comment\n              </button>\n            )}\n        </div>\n\n        {isAddingNewComment\n          && !isLoadingComments\n          && !commentsLoadingError\n          && (\n            <NewCommentForm\n              addComment={addComment}\n              selectedPostId={selectedPost.id}\n            />\n          )}\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[],\n  selectUser: (user: User) => void,\n  selectedUser: User | null,\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  selectUser,\n  selectedUser,\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const onSelectUser = (user: User) => {\n    selectUser(user);\n    setIsOpen(!isOpen);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className=\"dropdown is-active\"\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsOpen(!isOpen)}\n        >\n          <span>\n            {selectedUser?.name || 'Choose a user'}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      {isOpen && (\n        <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n          <div className=\"dropdown-content\">\n            {users.map(user => (\n              <a\n                href={`#user-${user.id}`}\n                className={classNames(\n                  'dropdown-item',\n                  {\n                    'is-active': false,\n                  },\n                )}\n                key={user.id}\n                onClick={() => onSelectUser(user)}\n              >\n                {user.name}\n              </a>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\nimport classNames from 'classnames';\n\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { getUsers } from './api/users';\nimport { getPosts } from './api/posts';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { Loader } from './components/Loader';\nimport { getComments, removeComment } from './api/comments';\nimport { Comment } from './types/Comment';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [isLoadingPosts, setIsLoadingPosts] = useState(false);\n  const [postsLoadingError, setPostsLoadingError] = useState(false);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isLoadingComments, setIsLoadingComments] = useState(false);\n  const [commentsLoadingError, setCommentsLoadingError] = useState(false);\n  const [isAddingNewComment, setIsAddingNewComment] = useState(false);\n\n  useEffect(() => {\n    getUsers().then(setUsers);\n  }, []);\n\n  const selectUser = (user: User) => {\n    setSelectedUser(user);\n    setIsLoadingPosts(true);\n    setPosts([]);\n    setSelectedPost(null);\n    setComments([]);\n    setPostsLoadingError(false);\n  };\n\n  useEffect(() => {\n    if (selectedUser) {\n      getPosts(selectedUser.id)\n        .then(setPosts)\n        .catch(() => setPostsLoadingError(true))\n        .finally(() => setIsLoadingPosts(false));\n    }\n  }, [selectedUser]);\n\n  useEffect(() => {\n    if (selectedPost) {\n      setIsLoadingComments(true);\n      setIsAddingNewComment(false);\n\n      getComments(selectedPost.id)\n        .then(setComments)\n        .catch(() => setCommentsLoadingError(true))\n        .finally(() => setIsLoadingComments(false));\n    }\n  }, [selectedPost]);\n\n  const createNewComment = () => {\n    setIsAddingNewComment(true);\n  };\n\n  const addComment = (newComment: Comment) => {\n    setComments([\n      ...comments,\n      newComment,\n    ]);\n  };\n\n  const deleteComment = (commentId: number) => {\n    setComments(comments\n      .filter(comment => comment.id !== commentId));\n\n    removeComment(commentId);\n  };\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  selectedUser={selectedUser}\n                  selectUser={selectUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoadingPosts && <Loader />}\n\n                {postsLoadingError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {!posts.length\n                  && !isLoadingPosts\n                  && selectedUser\n                  && !postsLoadingError\n                  && (\n                    <div\n                      className=\"notification is-warning\"\n                      data-cy=\"NoPostsYet\"\n                    >\n                      No posts yet\n                    </div>\n                  )}\n\n                {selectedUser\n                  && !postsLoadingError\n                  && posts.length > 0 && (\n                  <PostsList\n                    posts={posts}\n                    selectedPost={selectedPost}\n                    setSelectedPost={setSelectedPost}\n                    setCommentsLoadingError={setCommentsLoadingError}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              {\n                'Sidebar--open': selectedPost,\n              },\n            )}\n          >\n            {selectedPost && (\n              <div className=\"tile is-child box is-success\">\n                <PostDetails\n                  selectedPost={selectedPost}\n                  comments={comments}\n                  isLoadingComments={isLoadingComments}\n                  commentsLoadingError={commentsLoadingError}\n                  createNewComment={createNewComment}\n                  isAddingNewComment={isAddingNewComment}\n                  addComment={addComment}\n                  deleteComment={deleteComment}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}